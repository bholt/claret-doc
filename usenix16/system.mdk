# System model {#sec-transactions}

~ Fig { #system-diagram caption="*System model:* End-user requests are handled by replicated stateless application servers which all share a sharded datastore. Claret operates between these two layers, extending the datastore with ADT-aware concurrency control (*Claret server*) and adding functionality to the app servers to perform ADT operations and coordinate transactions (*Claret client*)." }
![Claret System Diagram](fig/system-diagram.pdf){.onecol width=3.1in}
~

The concept of ADTs could be applied to many different datastores and systems. For Claret, we focus on one commonly employed system architecture, shown in [#system-diagram]: a sharded datastore shared by many stateless replicated application servers within a single datacenter.
For horizontal scalability, datastores are typically divided into many shards, each containing a subset of the key space (often using consistent hashing), running on different hosts (nodes or cores).
Frontend servers are the *clients* in our model, implementing the core application logic and exposing it via APIs to end users which might be mobile clients or web servers. These servers are replicated to mitigate failures, but each instance may handle many concurrent end-user connections, mediating access to the backing datastore where application state resides.

Claret operates between application servers and the datastore.
Applications model their state using ADTs and operations on them, as they would in Redis, but differing from Redis, Claret strongly encourages the use of transactions to ease reasoning about consistency.
Clients are responsible for coordinating their transactions, retrying if necessary, using multi-threading to handle concurrent end-user requests.
A new ADT-aware concurrency control system is added to each shard of the core datastore.
ADT awareness is used in both the concurrency control system and the client, which will be explained in more depth in [#sec-leveraging].

**Programming model.**
The Claret programming model is not significantly different than traditional key/value stores, especially for users of Redis [@redis]. Rather than just strings with two available operations, `put` and `get`, records can have any of a number of different types, each of which have operations associated with them.
Each record has a type, determined by a tag associated with its key so invalid operations are prevented on the client.
The particular client bindings employed are not essential to this work; our code examples will use Python-like syntax similar to Redis's Python bindings though our actual implementation uses C++. An example of an ADT implementation of the Bid transaction is shown in [#fig-levels].

**Consistency model.**
Weak consistency models require programmers to understand and guard against all potentially problematic interleavings. With Claret, programmers instead focus on choosing ADTs that best represent their desired behavior, naturally exposing opportunities for optimization.
Individual operations in Claret are strictly linearizable, committing atomically on the shard that owns the record. Each record, including aggregate types, behaves as a single object living on one shard. Atomicity is determined by the granularity of ADT operations.
Custom ADTs can allow arbitrarily complex application logic to be atomic, provided they can localized to a single object, but in general, composing operations requires transactions.

~ Fig { #fig-levels .wide caption="At the application level, it is clear that bid transactions commute, but when translated down to put and get operations, this knowledge is lost. Using an ADT like a `topk` set preserves this commutativity information." }
![Application-level versus key/value store level](fig/app-level.pdf){width=100%}
~

~ Fig { #fig-rubis-conflicts caption="Overview of important Rubis transactions implemented with ADTs. Lines show conflicts between operations, many of which are either eliminated due to commutativity by boosting or mediated by phasing." }
![Example ADT version of Bid transaction](fig/rubis-conflicts.pdf){.onecol width=3.1in}
~

**Transaction model.**
Claret implements interactive distributed transactions with strict serializable isolation, similar to Spanner [@Spanner], with standard `begin`, `commit`, and `abort` functions and automatic retries. Claret supports general transactions: clients are free to perform any operations on any records within the scope of the transaction. It uses strict two-phase locking and acquires locks for each record accessed during transaction execution.

We support arbitrary ADT operation in transactions by splitting them into two parts, *prepare* and *commit*, executed on the shard holding the record. *Prepare* attempts to acquire the lock for the record; when it has been acquired, *prepare* may read any data it wishes from the record to compute the *result* returned to the caller. Operations without a return value do nothing after acquiring the lock, simply returning control to the calling transaction.
Once locks for all operations in a transaction have been acquired, a request is sent to each participating shard to execute the *commit* part of each of the *prepared* operations, which performs any mutation on the record and releases the lock.
Similar to Spanner [@Spanner], clients do not read their own writes; due to the buffering of mutations, operations always observe the state prior to the beginning of the transaction.

We chose a lock-based approach; we briefly explain in [#sec-boosting] how this approach could similarly benefit optimistic concurrency control (OCC).

Claret does not require major application modifications to express concurrency. From the clients' view, there are no fundamental differences between using Redis and Claret (except the addition of distributed transactions and custom types).
Under the hood, however, Claret will use its knowledge about ADTs to improve performance in a number of ways that we describe next.
