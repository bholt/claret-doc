# Related Work

**Improving Transaction Concurrency.**
Several recent systems have explored ways of exposing more concurrency between transactions. An old technique, transaction chopping [@Shasha:95], statically analyzes transactions and splits them to reduce the time locks are held for. Recently, Lynx [@Zhang:SOSP13] extended this to find commutativity and introduced a form of runtime pipelining to allow conflicting transactions to interleave safely.

Salt and Callas [@Xie:14;@Xie:15] introduced ways of separating transactions that often conflict from the rest so they can be handled differently. In Salt, problematic transactions were rewritten to operate with weaker consistency, which Callas improved upon to maintain the same ACID properties by using runtime pipelining within a group.
Boosting and phasing could both be applied within one of these groups along with runtime pipelining to expose concurrency among frequently conflicting transactions. It would be interesting to explore whether Claret's ADT knowledge could be used to inform Callas's grouping decisions, which are crucial to performance.

**ADTs and Commutativity.**
The importance of commutativity is well known in databases and distributed systems.
ADTs were first used in databases in the 1980s to support indices for custom data types [@Stonebraker:83;@Stonebraker:86], and for concurrency control [@Schwarz:84;@Weihl:1988;@Herlihy:88;@Fekete:90]. That work introduced abstract locks to allow databases to leverage commutativity and also allowed user-defined types that expressed their abstract behavior to the database. Another classic system [@Spector:85] used type-based locks in an early form of distributed transactions.

To improve scalability and flexibility, modern NoSQL stores gave up the knowledge afforded by pre-defined schemas, but recent work has started to show how these systems can still leverage commutativity.
Several NoSQL systems specialize for commutative operations to improve performance of serializable distributed transactions. Lynx [@Zhang:SOSP13] allows users to annotate parts of transactions as commutative to improve performance.
Doppel [@Narula:OSDI14], a multicore in-memory database, allows commutative operations on highly contended records to be performed in parallel *phases* with a technique called *phase reconciliation*. HyFlow [@Kim:EuroPar13] combines multi-versioning and commutativity to reorder commutative transactions before others, provided the entire transaction can be marked as commutative. Claret exposes commutativity as a natural part of the application design, and allows more nuanced commutativity to be exploited within transactions through abstract locks.

In eventually consistent datastores, commutativity can improve convergence. RedBlue consistency [@Li:OSDI12] exploits the convergence of commutative "blue" operations to avoid coordination. Conflict-free (or convergent) replicated data types (CRDTs/CvRDTs) [@Shapiro:SSS11] force operations to commute by defining merge functions that resolve conflicts automatically and have been implemented for production in Riak [@riak].
Claret's strictly linearizable model exposes concurrency without relaxing consistency because CRDT behavior is often still counterintuitive.

Bloom [@Bloom;@BloomL] helps programmers design applications in ways that do not require distributed coordination, but requires substantial changes to programs. Claret's model is natural for anyone familiar with Redis.


**Complex datatypes in NoSQL.**
There is a recent trend toward supporting complex data types in NoSQL datastores. Redis [@redis], one of the most popular key/value stores, has a broad command set supporting operations on several complex data types, but cannot be easily extended with new data types, nor does it support transactions.
Hyperdex [@hyperdex;@hyperdex-web] supports atomic operations on common data structures, and transactions [@hyperdex-warp]. MongoDB [@mongodb] supports atomically updating documents.

These systems support data types to make data modeling easier, not for performance. Claret leverages the same data types to expose concurrency and is designed to be extended with custom types.
