The high degree of writes caused by interactive applications like Twitter or eBay combined with the skewed access patterns exhibited by real-world systems lead to contention in datastores that inhibit scalability and can cause periods of diminished service or even catastrophic failure.
There ought to be sufficient concurrency in these applications to scale without resorting to weaker consistency models, but traditional concurrency control, operating on low level operations, cannot detect it.

We describe the design and implementation of Claret, a Redis-like data structure store which allows high-level application semantics to be communicated through abstract data types (ADTs). Using this abstraction, Claret is able to avoid unnecessary conflicts and reduce communication, while programmers continue to implement applications easily using whatever data structures are natural for their use case.
Claret is the first datastore to use ADTs to improve performance of distributed transactions; optimizations include transaction boosting, phasing, and operation combining.
On a transaction microbenchmark, Claret's ADT optimizations increase throughput by up to 49x over the baseline concurrency control and even up to 20% better than without transactions.
Furthermore, Claret improves peak throughput on benchmarks modeling real-world high-contention scenarios: 4.3x speedup on the Rubis auction benchmark, and 3.6x on a Twitter clone, achieving 67-82% of the non-transactional performance on the same workloads.
