# Programming model comparison
~ Center
~~ Fig {#fig-granularity .zoom caption="Granularity of various techinques. What is the best way for trading off consistency? For programmability?" }
![granularity](fig/granularity.pdf)
~~
~

~ Center
~~ Fig {#fig-knowledge .zoom caption="Knowledge vs control: do techniques provide information to the programmer (about uncertainty/staleness/visibility), or do they give control over these properties?" }
![knowledge](fig/knowledge.pdf){max-height=8em}
~~
~

We have now discussed many techniques for balancing the trade offs between consistency and performance in terms of how they manipulate constraints and bounds. However, the various programming models also differ how they expect programmers to express their desires and what control they provide.

What is the best granularity to express the high-level requirements of an application to the system? [#fig-granularity] organizes the programming models by levels of granularity: from coarse-grained full-system models to fine-grained per-operation control.

We previously mentioned that consistency models are prohibitively coarse-grained, especially considering that contention is the exceptional case and that most transactions are not problematic for performance.

At the opposite extreme, some datastores, such as Cassandra, allow choosing a consistency level for each operation. This places significant burden on programmers to select the level that is right for each use case: being too strict will hurt performance, being too weak will result in errors. Moreover, this operation-centric approach is not modular, as choices must be reconsidered each time a new operation is introduced that may interleave.

CRDTs and isolation types from Concurrent Revisions occupy another spot in the granularity space – they specify constraints in terms of *types*. This allows them to couple consistency with state – a data-centric approach. Indigo and Bloom associate application-level invariants with types.

High-level approaches – Indigo, Quelea, Sieve, and Bloom – automate the process of analyzing where coordination must occur and selecting appropriate synchronization to ensure correctness. This automation relieves programmers of the error-prone task of selecting fine-grained consistency levels and allows them to better span the constraint axes. Automation aids *modularity* as well – synthesized coordination rules can be adjusted whenever new functionality is added.
In order to do their job, these systems must know about the *abstract state* and *state transitions* or *abstract behavior* (together we will refer to these as *semantics*) which make up the application. In Indigo, semantics are exposed *manually* in pre- and post-condition annotations; similarly in Blazes. In Bloom, the semantics are implicit in the monotonic structures used to build the application, so no additional annotation is required.

Expressing abstract state and behavior *by construction*, as in Bloom, is powerful. It is less burdensome and error-prone than manual annotation, and more reusable. Going this route tends to require total buy-in for the application – annotations can be more handy for incremental adoption.
We have chosen to focus on *abstract data types* because they support this by-construction expression of semantics but are more natural for programmers to use than Bloom's statements over facts.
Just like with CRDTs, there may need to be many variants of data types in order to capture the desired consistency/performance properties desired by each application, but ADTs still allow significant re-use.

In the remaining sections of this paper we will show how we have used ADTs to express application semantics, describing prior techniques of leveraging ADTs and showing how we have extended it further.