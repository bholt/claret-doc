Interactive distributed applications like Twitter or eBay are difficult to scale because of the high degree of writes or update operations. The highly skewed access patterns exhibited by real-world systems lead to high contention in datastores, causing periods of diminished service or even catastrophic failure.
There is often sufficient concurrency in these applications to scale them without resorting to weaker models like eventual consistency, but traditional concurrency control mechanisms, which operate on low level operations, are unable to detect it.

In Claret, high-level application semantics are communicated to the datastore through *abstract data types* (ADTs), which let the programmer and datastore alike reason about their logical behavior, such as operation commutativity. The datastore can use this knowledge to avoid unnecessary conflicts or reduce communication, while the programmer can tune their performance by carefully choosing the right ADTs for their application or implementing custom ones which expose the maximum amount of concurrency.

In this work, we describe the design and implementation of an extensible ADT-store,  including optimizations which take advantage of the abstract properties of the ADTs: transaction boosting, phasing, and operation combining. 
Claret is the first datastore to use ADTs to improve performance of distributed transactions.
On a transaction microbenchmark, Claret's ADT optimizations show speedups up to 49x over the baseline concurrency control and even up to 20% better than without transactions.
Furthermore, Claret shows up to a 68x throughput improvement on a bid-heavy workload for the Rubis auction benchmark, and up to a 4x speedup on a Twitter clone modeling a realistic social graph.