# Introduction
<!--
~~ Notes
- obviously applications would like to ensure correctness,

- however they are often forced to relax correctness either for
  availability or to handle unexpected spikes in performance

- ideally applications would like to relax correctness in a way that
  still maintains the correctness of the application (i.e., return a
  value within 5%) or constrains the relaxation to when it is necessary
  (when there is a spike).

- further we would like to ensure that the relaxed correctness does
  not propagate to corrupt other data

- Unfortunately, with existing systems, applications approach
  inconsistency in an undisciplined way. Left alone, the application
  can corrupt all data in the system, making it useless to provide
  stronger consistency at any time.

- we introduce a more disciplined approach to inconsistency.

- Contributions
	- Consistency Safety
		- this is novel
		- motivate?
	- ADT-based Consistency Model
		- ADT provides semantics
		- Can define Pileus-style SLAs
		- Allows us to define value- or semantics-based metrics like Error Tolerance
~~
-->

To provide good user experiences, modern datacenter applications and
web services must balance the competing requirements of application
correctness and responsiveness. For example, a web store must not
double-charge for purchases but also cannot keep users waiting too
long (each additional millisecond of latency translates to a loss in
traffic and revenue [@linden06:amazon;@forrest09:slow]). Worse,
programmers must maintain this balance in an unpredictable environment
where a black and blue dress [@buzzfeed-dress] or Justin Bieber
[@bieber-instagram] can change application performance in the blink of
an eye.

Recognizing this trade-off, many existing storage systems support
configurable consistency levels that allow programmers to set the
consistency of individual operations
[@cassandra;@riak;@Li:12:RedBlue;@Sovran:11:Walter]. These allow
programmers to weaken consistency guarantees only for data that is not
critical to application correctness, retaining strong consistency for
vital data. Some systems further allow adaptable consistency levels at
runtime, where guarantees are only weakened when necessary to meet
availability or performance requirements (e.g., during a spike in
traffic or datacenter failure) [@Terry:13:SLAs;@Stribling:09:WheelFS].
<!--, or when it does not impact the application's correctness
guarantees (e.g., returning a slightly stale or estimated result is
acceptable). Some storage systems support this type of adaptable
consistency [@Terry:13:SLAs;@Stribling:09:WheelFS].--> Unfortunately,
using these systems correctly is challenging. If programmers are
*undisciplined* in their use of data from weakly consistent
operations, they can corrupt strongly consistent stored data,
inadvertently lowering the consistency of the storage system to its
weakest level.

In this paper, we propose a more disciplined approach to inconsistency
in the *inconsistent, performance-bound, approximate (IPA)* storage
system. IPA introduces the following concepts:

* *Consistency Safety*, a new property that ensures that values from
  weakly consistent operations cannot flow into stronger consistency
  operations without explicit endorsement from the programmer.  IPA is
  the first storage system to provide consistency safety.

* *Consistency Types.*, a new type system for which *type safety
  implies consistency safety*. Consistency types define the
  consistency and correctness of the returned value from every IPA
  operation, allowing programmers to reason about their use of
  different consistency levels.  IPA's type checker enforces the
  disciplined use of IPA consistency types statically at compile time
  by requiring programmers to handle all potential consistency cases,
  or explicitly endorse the propagation of inconsistent values.

* *Error-bounded Consistency.* IPA is a data structure store, like
  Redis [@redis] or Riak [@riak], allowing it to provide both
  traditional performance bounds on storage operations, as well as
  error bounds (e.g., the programmer can bound the returned value to
  within 5\% of the correct value). Within these bounds, IPA
  automatically adapts to return a value with the strongest IPA
  consistency type possible under the current system load.

We implement an IPA prototype based on Scala and Cassandra and show
that IPA allows the programmer to trade off performance and
consistency, safe in the knowledge that the type system has checked
the program for consistency safety. We demonstrate experimentally that
these mechanisms allow applications to dynamically adapt correctness
and performance to changing conditions with three applications: a
simple counter, a Twitter clone based on Retwis [@retwis] and a Ticket
sales service modeled after FusionTicket [@FusionTicket]. 
