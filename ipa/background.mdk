# The Case for Consistency Safety {#sec-background}

Unpredictable Internet traffic and unexpected failures force modern
datacenter applications to trade off consistency for performance. In
this section, we demonstrate the pitfalls of doing so in an
undisciplined way using a movie ticketing service, similar to AMC or
Fandango. Because ticketing services process financial transactions,
they must ensure correctness, which they can do using a strongly
consistent storage system. Unfortunately, providing strong consistency
for every operation can cause the storage system to collapse under
high load, as several ticketing services did in October 2015, when
tickets became available for the new Star Wars movie
[@forbes:star-wars].

To allow the application to scale more gracefully and handle traffic
spikes, the programmer may chose to weaken the consistency of some
operations. For example, if users frequently reload the page before
purchasing tickets, the programmer may weaken the consistency of the
read operations when displaying the number of remaining tickets
because giving users an estimate within 5\% is sufficient. Thus, under
normal load, the application would display the precise number of
tickets remaining, but under high load, the storage system can return
something less precise within some bounds. 

Suppose that the ticket sales application uses the number of remaining
tickets to decide the price.  If the read of the remaining tickets
returns the precise number, then the application can use that number
to calculate the ticket price when making a sale. However, if the
programmer chose to weaken the consistency of that read, then he must
be careful when using it to calculate a purchase. Done in an
undisciplined way, the application may over or under charge some users
depending on the consistency of the returned value.

However, using IPA, 

