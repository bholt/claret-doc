# The Case for Consistency Safety {#sec-background}

Unpredictable Internet traffic and unexpected failures force modern
datacenter applications to trade off consistency for performance. In
this section, we demonstrate the pitfalls of doing so in an
undisciplined way. As an example, we describe a movie ticketing
service, similar to AMC or Fandango. Because ticketing services
process financial transactions, they must ensure correctness, which
they can do by storing data in a strongly consistent storage
system. Unfortunately, providing strong consistency for every storage
operation can cause the storage system and application to collapse
under high load, as several ticketing services did in October 2015,
when tickets became available for the new Star Wars movie
[@forbes:star-wars].

~ Fig { #fig-tickets; caption="Ticket sales service. To meet a performance target in `displayEvent`, developer switches to a weak read for `getTicketCount`, not realizing that this inconsistent read will be used elsewhere to compute the ticket price. [\vspace{-10pt}]{input:texraw}" }
![](fig/tickets.pdf)
[\vspace{-18pt}]{input:texraw}
~

To allow the application to scale more gracefully and handle traffic
spikes, the programmer may choose to weaken the consistency of some
operations.  As shown in [#fig-tickets], the ticket application
displays each showing of the movie along with the number of tickets
remaining.  For better performance, the programmer may want to weaken
the consistency of the read operation that fetches the remaining
ticket count to give users an estimate, instead of the most up-to-date
value.
Under normal load, even with weak consistency, this count would often still be correct because propagation is typically fast compared to updates. However, eventual consistency makes no guarantees, so under heavier traffic spikes, the values could be significantly incorrect and the application has no way of knowing by how much. 

While this solves the programmer's performance problem, it introduces
a data consistency problem.  Suppose that, like Uber's surge pricing,
the ticket sales application wants to raise the price of the last 100
tickets for each showing to &dollar;15.  If the application uses a strongly
consistent read to fetch the remaining ticket count, then it can use
that value to compute the price of the ticket on the last screen in
[#fig-tickets]. However, if the programmer reuses `getTicketCount` which used a weak read to calculate the price, then this count could be arbitrarily wrong.
The application
could then over- or under-charge some users depending on the consistency of
the returned value.  Worse, the theater expects to make &dollar;1500 for
those tickets with the new pricing model, which may not happen with
the new weaker read operation.  Thus, programmers need to be careful
in their use of values returned from storage operations with weak
consistency. Simply weakening the consistency of an operation may lead
to unexpected consequences for the programmer (e.g., the theater not
selling as many tickets at the higher surge price as expected).

In this work, we propose a programming model that can prevent using inconsistent values where they were not intended, as well as introduce mechanisms that allow the storage system to dynamically adapt consistency within predetermined performance and correctness bounds.
