
The distributed applications underlying popular web services and social networks have tight performance requirements. They are expected to scale linearly, never lose data, always be available, and respond quickly to users around the world. In order to meet this needs in the face of high round-trip latencies, network partitions, server failures, and load spikes, applications must give up strong consistency and use datastores supporting weaker guarantees, such as eventual consistency. Making this switch is highly error-prone because relaxed consistency models are notoriously difficult to understand and test. Furthermore, introducing weak consistency to handle worst-case scenarios creates an ever-present risk of inconsistency even for the common case, when everything is running smoothly.

In this work, we propose a new programming model for distributed data that uses types to provide a *disciplined* way to trade off consistency for performance safely. Programmers specify performance targets and correctness requirements as constraints on abstract data types (ADTs), and handle uncertainty about values with new *inconsistent, performance-bound, approximate (IPA)* types. We demonstrate how this programming model can be implemented in Scala on top of an existing datastore, Cassandra, and used to make performance/correctness tradeoffs in two applications: a ticket sales service and a Twitter clone. Our evaluation shows that IPA's runtime system can enforce programmer-specified performance and correctness bounds with latencies comparable to weak consistency and 2-10$\times$ better than strong consistency under a variety of adverse conditions.